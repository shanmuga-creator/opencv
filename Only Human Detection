import cv2
from ultralytics import YOLO

def detect_and_count_humans():
    # Load the YOLOv8 model
    model = YOLO('yolov8n.pt')  # Use 'yolov8n.pt' for lightweight detection

    # Open the camera (change index to 0 for built-in webcam)
    cap = cv2.VideoCapture(1)

    if not cap.isOpened():
        print("Cannot open camera")
        return
# Set the desired frame size (width and height)
    frame_width = 1280  # Set width to 1280 pixels
    frame_height = 720  # Set height to 720 pixels
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, frame_width)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, frame_height)

    # Define the codec and create VideoWriter object to save video
    # 'XVID' is a common codec, but you can also use 'MJPG', 'MP4V', etc.
    fourcc = cv2.VideoWriter_fourcc(*'XVID')  # Codec for .avi files
    out = cv2.VideoWriter('output.avi', fourcc, 20.0, (frame_width, frame_height))  # 20.0 is the frame rate

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to grab frame")
            break

        # Perform human detection
        results = model(frame)

        # Initialize person count
        person_count = 0

        # Filter detections for the 'person' class (class ID 0 in COCO dataset)
        for result in results[0].boxes.data:
            class_id = int(result[5])  # Class ID is in the 6th column
            if class_id == 0:  # 'person' class
                person_count += 1  # Increment person count
                x1, y1, x2, y2 = map(int, result[:4])  # Bounding box coordinates
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)  # Green rectangle

        # Display the person count on the frame
        cv2.putText(frame, f"People Count: {person_count}", (10, 50),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

        # Show the detection results
        cv2.imshow("Human Detection with Counting", frame)

        # Exit the loop when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release resources
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    detect_and_count_humans()
